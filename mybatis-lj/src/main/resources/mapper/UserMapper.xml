<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace：命名空间，作用就是对sql进行分类化管理，理解sql隔离
注意：使用namespace代理方法开发、namespace的命名必须有符合规定。
-->
<mapper namespace="test">
	<!--  -->
	<resultMap type="com.lj.mybatis.model.User" id="UserResultMap">
		<id column="id" property="id"/>
		<result column="username" property="userName"/>
		<result column="passwd" property="passwd"/>
		<result column="sex" property="sex"/>
		<result column="birthday" property="birthday"/>
		<result column="address" property="address"/>
	</resultMap>
	<!--
	id:标识映射文件的sql
	 将sql语句封装到mappedStatement对象中所以将id称为statement的id
	parameterType:指定输入参数的类型
	#{}：表示占位符
	#{id}：其中的id表示接收输入参数，参数名称是id。如果参数类型是简单类型，#{}中的参数名称可以是任意值。
	resultType:指定sql输出结果所映射的java对象类型。
	-->
	<!--根据用户id获取用户  -->
	<select id="findUserById" parameterType="int" resultType="com.lj.mybatis.model.User">
		select * from user_lj where id=#{id}
	</select>
	
	<!-- 
		${}:表示拼接sql字符串，将接收到的参数内容不加任何的修饰拼接在sql中。
		使用${}拼接sql，会引起sql注入。  
		${value}:接收输入参数的内容，如果传入的类型是简单类型，${}中只能使用value
	 -->
	<!--根据用户名称模糊查询用户  -->
	<select id="findUserByName" parameterType="String" resultMap="UserResultMap">
		select * from user_lj where username like '%${value}%' 
	</select>
	<!-- 
		parameterType:指定传入参数类型为User对象
		#{}：中指定User对象的属性名，接收到user对象的属性值。mybatis是通过OGNL获取对象的属性值	
	 -->
	<!--添加用户  -->
	<insert id="insertUser" parameterType="com.lj.mybatis.model.User" >
		<!--
			将插入数据的主键返回，返回到User对象中
			select LAST_INSERT_ID():得到刚insert的记录的主键值，（只适用于自增主键）
			
			keyProperty:将返回的主键值返回到parameterType指定的对象的属性。
			order： 决定select LAST_INSERT_ID()语句的执行顺序（执行顺序是相对于insert语句而言的）。
			resultType:指定返回的主键的类型。
		  -->
		<selectKey keyProperty="id" order="AFTER" resultType="int">
			select LAST_INSERT_ID()
		</selectKey>
		<!-- 
			使用mysql的UUID()生成主键。 
			执行过程：
			通过UUID()获得主键，将主键设置到User对象的id属性中，然后在insert执行之前从User对象中取出id属性值。
			
			<selectKey keyProperty="id" order="BEFORE" resultType="String">
				select UUID()
			</selectKey>
		-->
		insert into user_lj (username,passwd,sex,birthday,address) values(#{userName},#{passwd},#{sex},#{birthday},#{address})
	</insert>
	
	<!-- 根据用户ID删除用户 -->
	<delete id="deleteUserById" parameterType="int">
		delete from user_lj where id=#{id}
	</delete>
	
	<!--  
		需要传入用户ID和用户的更新信息。
		paremeterType指定User对象，注意：id必须存在。
		#{id}：从传入的User对象中获取id属性值。
	-->
	
	<!--根据用户id修改用户  -->
	<update id="updateUserById" parameterType="com.lj.mybatis.model.User">
		update user_lj set username=#{userName},passwd=#{passwd} where id=#{id}
	</update>



</mapper>